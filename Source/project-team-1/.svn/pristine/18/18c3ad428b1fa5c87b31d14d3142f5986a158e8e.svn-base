package manager;

import entities.Customers;
import entities.OrderDetails;
import entities.Orders;
import entities.ProductCarts;
import entities.Products;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.UIViewRoot;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import model.CustomersFacade;
import model.OrderDetailsFacade;
import model.OrdersFacade;
import model.ProductsFacade;

@ManagedBean
@RequestScoped
public class OrderManaged implements Serializable {

    @EJB
    private OrdersFacade orderFacede;
    @EJB
    private CustomersFacade customerFacade;
    @EJB
    private OrderDetailsFacade orderDetailFacade;
    @EJB
    private ProductsFacade productFacade;

    private Orders order;
    private OrderDetails orderDetails;

    public OrderManaged() {
        if (order == null) {
            order = new Orders();
        }
        if (orderDetails == null) {
            orderDetails = new OrderDetails();
        }
    }

    public Orders getOrder() {
        return order;
    }

    public void setOrder(Orders order) {
        this.order = order;
    }

    public String order() {
        int orderID;
        HttpSession session = SessionManaged.getSession();
        order.setOrderID(0);
        order.setCustomerID(customerFacade.getByName(session.getAttribute("username").toString()));
        order.setOrderDate(Calendar.getInstance().getTime());
        orderID = orderFacede.createOrders(order);

        CartManaged cart = new CartManaged();
        for (Entry<Integer, ProductCarts> item : cart.getCart().entrySet()) {
            Products product = productFacade.find(item.getKey());
            int quantity = product.getQuantity() - item.getValue().getQuantity();
            product.setQuantity(quantity);
            product.setOrderCount(product.getOrderCount() + 1);
            productFacade.edit(product);
            orderDetails = new OrderDetails();
            orderDetails.setOrderID(orderFacede.find(orderID));
            orderDetails.setProductID(product);
            orderDetails.setQuantity((short) item.getValue().getQuantity());
            orderDetailFacade.create(orderDetails);
        }
        session.removeAttribute("CART");
        return "index";
    }

    public List<Orders> getList() {
        return orderFacede.findAll();
    }

    public List<Orders> getListByUserID(Customers id) {
        return orderFacede.getListByUserID(id);
    }

    public String getID(String id) {
        FacesContext context = FacesContext.getCurrentInstance();
        UIViewRoot root = context.getViewRoot();

        UIComponent c = findComponent(root, id);
        if (c != null) {
            return c.getClientId(context);
        } else {
            return "";
        }
    }

    private UIComponent findComponent(UIComponent c, String id) {
        if (id.equals(c.getId())) {
            return c;
        }
        Iterator<UIComponent> kids = c.getFacetsAndChildren();
        while (kids.hasNext()) {
            UIComponent found = findComponent(kids.next(), id);
            if (found != null) {
                return found;
            }
        }
        return null;
    }
}
